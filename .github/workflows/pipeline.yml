name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed  # Runs when a PR is merged

permissions:
  contents: write  # Required for GitHub Pages deployment

jobs:
  restrict_push:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is allowed
        run: |
          if [[ "${{ github.actor }}" != "TheBloodyAmateur" ]]; then
            echo "‚ùå Only TheBloodyAmateur can push to main!"
            exit 1
          fi
  build:
    needs: restrict_push
    runs-on: ubuntu-latest
    outputs:
      IS_RELEASE: ${{ steps.check_release.outputs.IS_RELEASE }}
      TAG_VERSION: ${{ steps.check_release.outputs.TAG_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --stacktrace

      - name: Run Tests
        run: ./gradlew test --stacktrace

      - name: Check for release trigger
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"
          
          if [[ "$COMMIT_MSG" =~ ^(Release|release):\ v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          TAG_VERSION=${BASH_REMATCH[2]}
          echo "üîç Detected Release Version: $TAG_VERSION"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "IS_RELEASE=true" >> $GITHUB_ENV
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
          else
          echo "‚ùå No release tag detected."
          echo "IS_RELEASE=false" >> $GITHUB_ENV
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug `TAG_VERSION` from build.outputs
        run: |
          echo "üîç build.outputs.TAG_VERSION: ${{ steps.check_release.outputs.TAG_VERSION }}"

  deploy_javadoc:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Generate Javadoc with Sidebar
        run: ./gradlew javadoc -Pwindowtitle="EventManager Javadoc" -Pdoctitle="EventManager" -Pbottom="Generated by Javadoc" --info

      - name: Get Version from Tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "üîç Detected version: $VERSION"

      - name: Clone `gh-pages` Branch
        run: |
          git clone --depth=1 --branch=gh-pages https://github.com/${{ github.repository }}.git gh-pages

      - name: Configure Git User & Authentication
        run: |
          cd gh-pages
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Javadoc to Versioned Directory
        run: |
          rm -rf gh-pages/docs/v${{ env.VERSION }}
          mkdir -p gh-pages/docs/v${{ env.VERSION }}
          cp -r build/docs/javadoc/* gh-pages/docs/v${{ env.VERSION }}

      - name: Update `latest` Javadoc
        run: |
          rm -rf gh-pages/docs/latest
          cp -r gh-pages/docs/v${{ env.VERSION }} gh-pages/docs/latest

      - name: Generate Javadoc Version List (`versions.js`)
        run: |
          cd gh-pages/docs
          echo "üîç Generating versions.js..."

          echo "var versions = [" > versions.js
          for dir in v*/; do
            version=${dir%/}
            echo "'$version'," >> versions.js
          done
          echo "'latest'];" >> versions.js

          git add versions.js
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è No changes to commit. Skipping push."
            exit 0
          fi

          git commit -m "Update Javadoc versions list"
          git push origin gh-pages

      - name: Inject Version Selector into Each Javadoc Version
        run: |
          cd gh-pages/docs
          for dir in v*/ latest/; do
            cp versions.js "$dir"

            echo '
            <script src="../versions.js"></script>
            <script>
              document.addEventListener("DOMContentLoaded", function() {
                var dropdown = document.createElement("select");
                dropdown.id = "version-selector";
                dropdown.onchange = function() {
                  var selectedVersion = dropdown.value;
                  if (selectedVersion === "latest") {
                    window.location.href = "../latest/index.html";
                  } else {
                    window.location.href = "../" + selectedVersion + "/index.html";
                  }
                };

                for (var i = 0; i < versions.length; i++) {
                  var option = document.createElement("option");
                  option.value = versions[i];
                  option.textContent = versions[i];
                  dropdown.appendChild(option);
                }

                document.body.insertBefore(dropdown, document.body.firstChild);
              });
            </script>
            ' >> "$dir/script.js"
          done
          git add v*/script.js latest/script.js
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è No changes to commit. Skipping push."
            exit 0
          fi
          git commit -m "Add dynamic Javadoc version selector"
          git push origin gh-pages

      - name: Push Changes to GitHub Pages
        run: |
          cd gh-pages
          git add .
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è No changes to commit. Skipping push."
            exit 0
          fi
          git commit -m "Deploy Javadoc v${{ env.VERSION }}"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate_release_notes:
    needs: build
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ env.release_notes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify Script Exists
        run: |
          ls -la
          if [ ! -f ./generate_release_notes.sh ]; then
            echo "‚ùå ERROR: generate_release_notes.sh is missing!"
            exit 1
          fi

      - name: Make Script Executable
        run: chmod +x ./generate_release_notes.sh

      - name: Run Release Notes Script
        run: ./generate_release_notes.sh > release_notes.md

      - name: Display Release Notes
        run: cat release_notes.md

      - name: Store Release Notes as Output
        id: store_notes
        run: |
          {
            echo "release_notes<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}