name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed  # Runs when a PR is merged

permissions:
  contents: write  # Required for GitHub Pages deployment

jobs:
  restrict_push:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is allowed
        run: |
          if [[ "${{ github.actor }}" != "TheBloodyAmateur" ]]; then
            echo "‚ùå Only TheBloodyAmateur can push to main!"
            exit 1
          fi
  build:
    needs: restrict_push
    runs-on: ubuntu-latest
    outputs:
      IS_RELEASE: ${{ steps.check_release.outputs.IS_RELEASE }}
      TAG_VERSION: ${{ steps.check_release.outputs.TAG_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --stacktrace

      - name: Run Tests
        run: ./gradlew test --stacktrace

      - name: Check for release trigger
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"
          
          if [[ "$COMMIT_MSG" =~ ^(Release|release):\ v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          TAG_VERSION=${BASH_REMATCH[2]}
          echo "üîç Detected Release Version: $TAG_VERSION"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "IS_RELEASE=true" >> $GITHUB_ENV
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
          else
          echo "‚ùå No release tag detected."
          echo "IS_RELEASE=false" >> $GITHUB_ENV
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug `TAG_VERSION` from build.outputs
        run: |
          echo "üîç build.outputs.TAG_VERSION: ${{ steps.check_release.outputs.TAG_VERSION }}"

  deploy_javadoc:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Generate Javadoc with Sidebar
        run: ./gradlew javadoc -Pwindowtitle="EventManager Javadoc" -Pdoctitle="EventManager" -Pbottom="Generated by Javadoc" --info

      - name: Get Version from Tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "üîç Detected version: $VERSION"

      - name: Clone `gh-pages` Branch
        run: |
          git clone --depth=1 --branch=gh-pages https://github.com/${{ github.repository }}.git gh-pages

      - name: Configure Git User & Authentication
        run: |
          cd gh-pages
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Javadoc to Versioned Directory
        run: |
          rm -rf gh-pages/docs/v${{ env.VERSION }}
          mkdir -p gh-pages/docs/v${{ env.VERSION }}
          cp -r build/docs/javadoc/* gh-pages/docs/v${{ env.VERSION }}

      - name: Update `latest` Javadoc
        run: |
          rm -rf gh-pages/docs/latest
          cp -r gh-pages/docs/v${{ env.VERSION }} gh-pages/docs/latest

      - name: Generate Javadoc Version List (`versions.js`)
        run: |
          cd gh-pages/docs
          echo "üîç Generating versions.js..."

          echo "var versions = [" > versions.js
          for dir in v*/; do
            version=${dir%/}
            echo "'$version'," >> versions.js
          done
          echo "'latest'];" >> versions.js

          git add versions.js
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è No changes to commit. Skipping push."
            exit 0
          fi

          git commit -m "Update Javadoc versions list"
          git push origin gh-pages

      - name: Inject Version Selector into Each Javadoc Version
        run: |
          cd gh-pages/docs
          for dir in v*/ latest/; do
            cp versions.js "$dir"

            echo '
            <script src="../versions.js"></script>
            <script>
              document.addEventListener("DOMContentLoaded", function() {
                var dropdown = document.createElement("select");
                dropdown.id = "version-selector";
                dropdown.onchange = function() {
                  var selectedVersion = dropdown.value;
                  if (selectedVersion === "latest") {
                    window.location.href = "../latest/index.html";
                  } else {
                    window.location.href = "../" + selectedVersion + "/index.html";
                  }
                };

                for (var i = 0; i < versions.length; i++) {
                  var option = document.createElement("option");
                  option.value = versions[i];
                  option.textContent = versions[i];
                  dropdown.appendChild(option);
                }

                document.body.insertBefore(dropdown, document.body.firstChild);
              });
            </script>
            ' >> "$dir/script.js"
          done
          git add v*/script.js latest/script.js
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è No changes to commit. Skipping push."
            exit 0
          fi
          git commit -m "Add dynamic Javadoc version selector"
          git push origin gh-pages

      - name: Push Changes to GitHub Pages
        run: |
          cd gh-pages
          git add .
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è No changes to commit. Skipping push."
            exit 0
          fi
          git commit -m "Deploy Javadoc v${{ env.VERSION }}"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate_release_notes:
    needs: build
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ env.release_notes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug `TAG_VERSION` from build
        run: |
          echo "üîç Retrieved TAG_VERSION in generate_release_tag: ${{ needs.build.outputs.TAG_VERSION }}"

      - name: Find Previous Release Tag
        id: get_previous_tag
        run: |
          echo "üîç Fetching all tags..."
          git fetch --tags
          git tag -l --sort=-v:refname
          
          PREV_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          
          if [ -z "$PREV_TAG" ]; then
            echo "‚ö†Ô∏è No previous version tag found, using the first commit."
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "üîç Previous release tag: $PREV_TAG"
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV


      - name: Generate Release Notes
        id: generate_notes
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          commitMode: true  # Use commit-based changelog instead of PR-based
          fetchViaCommits: true
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}",
              "categories": [
                {
                    "title": "## Feature",
                    "labels": ["feat", "feature"]
                },
                {
                    "title": "## Fix",
                    "labels": ["fix", "bug"]
                },
                {
                    "title": "## Docs",
                    "labels": ["docs", "doc"]
                },
                {
                    "title": "## Refactor",
                    "labels": ["refactor"]
                },
                {
                    "title": "## Chore",
                    "labels": ["chore"]
                }
              ],
              "label_extractor": [
                {
                  "exclude_labels": ["release","Release"],
                  "pattern": "^(build|ci|fix|perf|refactor|revert|style|test):",
                  "target": "$1"
                }
              ]
            }

      - name: Debug Generated Changelog Before Storing Output
        run:
          echo "${{ steps.generate_notes.outputs.changelog }}"

      - name: Store Release Notes as Output
        id: store_notes
        run: |
          {
            echo "release_notes<<EOF"
            echo "${{ steps.generate_notes.outputs.changelog }}"
            echo "EOF"
          } >> "$GITHUB_ENV"  

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate_release_tag:
    needs: [ build, generate_release_notes ]
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug Received Release Notes
        run:
          echo "${{ needs.generate_release_notes.outputs.release_notes }}"

      - name: Debug `TAG_VERSION` from build
        run: |
          echo "üîç Retrieved TAG_VERSION in generate_release_tag: ${{ needs.build.outputs.TAG_VERSION }}"

      - name: Configure Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Create Git tag for release
        run: |
          TAG_VERSION="${{ needs.build.outputs.TAG_VERSION }}"
          if [[ -z "$TAG_VERSION" ]]; then
            echo "‚ùå TAG_VERSION is empty! Cannot create a tag."
            exit 1
          fi
          git tag -a "v$TAG_VERSION" -m "Release version $TAG_VERSION"
          git push origin "v$TAG_VERSION"

      - name: Create a GitHub release with release notes
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.build.outputs.TAG_VERSION }}"
          files: build/libs/*.jar
          body: "${{ needs.generate_release_notes.outputs.release_notes }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger_jitpack_build:
    needs: [ build, generate_release_tag ]
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Debug `TAG_VERSION` from build
        run: |
          echo "üîç Retrieved TAG_VERSION in trigger_jitpack_build: ${{ needs.build.outputs.TAG_VERSION }}"

      - name: Trigger JitPack Build
        run: |
          TAG_VERSION="${{ needs.build.outputs.TAG_VERSION }}"
          if [[ -z "$TAG_VERSION" ]]; then
            echo "‚ùå TAG_VERSION is empty! Exiting..."
            exit 1
          fi

          echo "üîç Triggering JitPack build for version: v$TAG_VERSION"

          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/TheBloodyAmateur/EventManager/v$TAG_VERSION/build.log")

          if [[ "$RESPONSE_CODE" -eq 404 ]]; then
            echo "‚ö†Ô∏è JitPack does not recognize the version yet. Retrying..."
          fi

          MAX_RETRIES=20
          RETRY_DELAY=30
          RETRY_COUNT=0

          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/TheBloodyAmateur/EventManager/v$TAG_VERSION/build.log")

            if [[ "$RESPONSE_CODE" -eq 200 ]]; then
              echo "‚úÖ JitPack build found!"
              exit 0
            fi

            echo "‚ö†Ô∏è JitPack build still not available. Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
            ((RETRY_COUNT++))
          done

          echo "‚ùå JitPack build log not found after multiple attempts."
          exit 1
