name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed  # Runs when a PR is merged

permissions:
  contents: write  # Required for GitHub Pages deployment

jobs:
  restrict_push:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is allowed
        run: |
          if [[ "${{ github.actor }}" != "TheBloodyAmateur" ]]; then
            echo "‚ùå Only TheBloodyAmateur can push to main!"
            exit 1
          fi
  build:
    needs: restrict_push
    runs-on: ubuntu-latest
    outputs:
      IS_RELEASE: ${{ steps.check_release.outputs.IS_RELEASE }}
      TAG_VERSION: ${{ steps.check_release.outputs.TAG_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --stacktrace

      - name: Run Tests
        run: ./gradlew test --stacktrace

      - name: Check for release trigger
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"
          
          if [[ "$COMMIT_MSG" =~ ^(Release|release):\ v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          TAG_VERSION=${BASH_REMATCH[2]}
          echo "üîç Detected Release Version: $TAG_VERSION"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "IS_RELEASE=true" >> $GITHUB_ENV
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
          else
          echo "‚ùå No release tag detected."
          echo "IS_RELEASE=false" >> $GITHUB_ENV
          echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug `TAG_VERSION` from build.outputs
        run: |
          echo "üîç build.outputs.TAG_VERSION: ${{ steps.check_release.outputs.TAG_VERSION }}"

  deploy_javadoc:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Generate Javadoc
        run: ./gradlew javadoc

      - name: Deploy Javadoc to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build/docs/javadoc
          clean: true

  generate_release_notes:
    needs: build
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ env.release_notes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug `TAG_VERSION` from build
        run: |
          echo "üîç Retrieved TAG_VERSION in generate_release_tag: ${{ needs.build.outputs.TAG_VERSION }}"

      - name: Find Previous Release Tag
        id: get_previous_tag
        run: |
          echo "üîç Fetching all tags..."
          git fetch --tags
          git tag -l --sort=-v:refname
          
          PREV_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          
          if [ -z "$PREV_TAG" ]; then
            echo "‚ö†Ô∏è No previous version tag found, using the first commit."
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "üîç Previous release tag: $PREV_TAG"
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV


      - name: Generate Release Notes
        id: generate_notes
        run: |
          echo "üîç Fetching commits from $PREV_TAG to HEAD..."
          git log $PREV_TAG..HEAD --oneline --no-merges
          
          COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"%s" --no-merges | grep -Ev '^release: v[0-9]+\.[0-9]+\.[0-9]+$' || true)
          
          ALLOWED_LABELS="^(feat|fix|docs|chore|improvement|security):"
          NOTES=""
          
          echo "üîç Commits Since Last Release ($PREV_TAG):"
          echo "$COMMITS"
          
          if [[ -z "$COMMITS" ]]; then
            echo "‚ö†Ô∏è No valid commits found since last release!"
            NOTES="No notable changes in this release."
          else
            while IFS= read -r commit; do
              if [[ "$commit" =~ $ALLOWED_LABELS ]]; then
                LABEL=$(echo "$commit" | sed -E 's/^(.*?):.*/\1/')
                MESSAGE=$(echo "$commit" | sed -E 's/^(.*?): (.*)/\2/')
                NOTES="${NOTES}\n- **${LABEL}**: ${MESSAGE}"
              fi
            done <<< "$COMMITS"
          fi
          
          echo "üîç Generated Release Notes:"
          echo "$NOTES"

          {
            echo "release_notes<<EOF"
            echo "$NOTES"
            echo "EOF"
          } >> $GITHUB_ENV

  generate_release_tag:
    needs: [ build, generate_release_notes ]
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug `TAG_VERSION` from build
        run: |
          echo "üîç Retrieved TAG_VERSION in generate_release_tag: ${{ needs.build.outputs.TAG_VERSION }}"

      - name: Configure Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Create Git tag for release
        run: |
          TAG_VERSION="${{ needs.build.outputs.TAG_VERSION }}"
          if [[ -z "$TAG_VERSION" ]]; then
            echo "‚ùå TAG_VERSION is empty! Cannot create a tag."
            exit 1
          fi
          git tag -a "v$TAG_VERSION" -m "Release version $TAG_VERSION"
          git push origin "v$TAG_VERSION"

      - name: Create a GitHub release with release notes
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.build.outputs.TAG_VERSION }}"
          files: build/libs/*.jar
          body: ${{ needs.generate_release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  trigger_jitpack_build:
    needs: [ build, generate_release_tag ]
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Debug `TAG_VERSION` from build
        run: |
          echo "üîç Retrieved TAG_VERSION in trigger_jitpack_build: ${{ needs.build.outputs.TAG_VERSION }}"

      - name: Trigger JitPack Build
        run: |
          TAG_VERSION="${{ needs.build.outputs.TAG_VERSION }}"
          if [[ -z "$TAG_VERSION" ]]; then
            echo "‚ùå TAG_VERSION is empty! Exiting..."
            exit 1
          fi

          echo "üîç Triggering JitPack build for version: v$TAG_VERSION"
          RESPONSE_CODE=$(curl -X GET "https://jitpack.io/api/builds/com/github/TheBloodyAmateur/EventManager/v$TAG_VERSION" -s -o /dev/null -w "%{http_code}")

          if [[ "$RESPONSE_CODE" -ne 201 && "$RESPONSE_CODE" -ne 200 ]]; then
            echo "‚ùå JitPack build request failed! Response: $RESPONSE_CODE"
            exit 1
          fi

          echo "‚úÖ JitPack build successfully triggered!"

      - name: Wait for JitPack Build
        run: |
          TAG_VERSION="${{ needs.build.outputs.TAG_VERSION }}"
          echo "‚è≥ Waiting for JitPack to process the build..."

          MAX_RETRIES=5
          RETRY_DELAY=30
          RETRY_COUNT=0

          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/TheBloodyAmateur/EventManager/v$TAG_VERSION/build.log")

            if [[ "$RESPONSE_CODE" -eq 200 ]]; then
              echo "‚úÖ JitPack build log found!"
              exit 0
            fi

            echo "‚ö†Ô∏è JitPack build not available yet. Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
            ((RETRY_COUNT++))
          done

          echo "‚ùå JitPack build log not found after multiple attempts."
          exit 1