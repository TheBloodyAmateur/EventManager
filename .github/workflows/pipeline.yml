name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed  # Runs when a PR is merged

permissions:
  contents: write  # Required for GitHub Pages deployment

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      IS_RELEASE: ${{ steps.check_release.outputs.IS_RELEASE }}
      TAG_VERSION: ${{ steps.check_release.outputs.TAG_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --stacktrace

      - name: Run Tests
        run: ./gradlew test --stacktrace

      - name: Check for release trigger
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" =~ ^(Release|release):\ v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            TAG_VERSION=${BASH_REMATCH[2]}
            echo "New release tag detected: $TAG_VERSION"
            echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
            echo "IS_RELEASE=true" >> $GITHUB_ENV
            echo "::set-output name=TAG_VERSION::$TAG_VERSION"
            echo "::set-output name=IS_RELEASE::true"
          else
            echo "No release tag detected."
            echo "IS_RELEASE=false" >> $GITHUB_ENV
            echo "::set-output name=IS_RELEASE::false"
          fi

  deploy_javadoc:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Generate Javadoc
        run: ./gradlew javadoc

      - name: Deploy Javadoc to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build/docs/javadoc
          clean: true

  generate_release_notes:
    needs: build
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate release notes
        id: generate_notes
        run: |
          COMMITS=$(git log --oneline)
          ALLOWED_LABELS="^(feat|fix|docs|chore|improvement|security):"
          NOTES=""

          for commit in $COMMITS; do
            if [[ "$commit" =~ $ALLOWED_LABELS ]]; then
              LABEL=$(echo "$commit" | sed -E 's/^(.*?):.*/\1/')
              MESSAGE=$(echo "$commit" | sed -E 's/^(.*?): (.*)/\2/')
              NOTES="${NOTES}\n- **${LABEL}**: ${MESSAGE}"
            fi
          done

          if [ -z "$NOTES" ]; then
            NOTES="No notable changes in this release."
          fi

          echo "release_notes=$NOTES" >> $GITHUB_ENV
          echo "::set-output name=release_notes::$NOTES"

  generate_release_tag:
    needs: [build, generate_release_notes]
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Git tag for release
        run: |
          git tag -a "v${{ needs.build.outputs.TAG_VERSION }}" -m "Release version ${{ needs.build.outputs.TAG_VERSION }}"
          git push origin "v${{ needs.build.outputs.TAG_VERSION }}"

      - name: Create a GitHub release with release notes
        uses: softprops/action-gh-release@v1
        with:
          files: build/libs/*.jar
          body: ${{ steps.generate_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger_jitpack_build:
    needs: generate_release_tag
    if: ${{ needs.build.outputs.IS_RELEASE == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Trigger JitPack Build
        run: |
          curl -X POST "https://jitpack.io/api/builds?repo=TheBloodyAmateur/EventManager&branch=${{ needs.build.outputs.TAG_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
